"""generating a piano MIDI file using a previously trained neural network model
"""
import numpy
import pickle
from music21 import instrument, note, stream, chord, duration, tempo, scale
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import BatchNormalization as BatchNorm
from keras.layers import Activation


def generate():
    """ Generate a piano midi file """

    # load the notes used to train the model
    with open('data/notes', 'rb') as filepath:
        notes = pickle.load(filepath)

    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))
    # Get all pitch names
    n_vocab = len(set(notes))

    network_input, normalized_input = prepare_sequences(notes, pitchnames, n_vocab)
    model = create_network(normalized_input, n_vocab)
    prediction_output = generate_notes(model, network_input, pitchnames, n_vocab)
    create_midi(prediction_output)


def prepare_sequences(notes, pitchnames, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    # map between notes and integers and back
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    sequence_length = 32
    network_input = []
    output = []
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = numpy.reshape(network_input, (n_patterns, sequence_length, 1))
    # normalize input
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)


def create_network(network_input, n_vocab):
    """ create the structure of the neural network """
    model = Sequential()
    model.add(LSTM(
        512,
        input_shape=(network_input.shape[1], network_input.shape[2]),
        recurrent_dropout=0.3,
        return_sequences=True
    ))
    model.add(LSTM(512, return_sequences=True, recurrent_dropout=0.3, ))
    model.add(LSTM(512))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(256))
    model.add(Activation('relu'))
    model.add(BatchNorm())
    model.add(Dropout(0.3))
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam')

    # Load the weights to each node
    model.load_weights('trained_weights.hdf5')

    return model


def generate_notes(model, network_input, pitchnames, n_vocab):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = numpy.random.randint(0, len(network_input) - 1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    # generate 500 notes
    for note_index in range(200):
        prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = numpy.random.choice(range(n_vocab), p=prediction[0])
        result = int_to_note[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output


def create_midi(prediction_output):
    """ convert the output from the prediction to notes and create a MIDI file from the notes """
    offset = 0
    output_notes = []
    overlap_duration = 2
    # boundaries
    lower_bound = note.Note('C4').pitch.midi  # Middle C
    upper_bound = note.Note('C6').pitch.midi  # C in the 6th octave

    default_pitch = 60  # Default pitch value to be used when the pitch cannot be determined

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                try:
                    new_pitch = int(current_note)
                except ValueError:
                    new_pitch = default_pitch

                new_note = note.Note()
                new_note.pitch.midi = new_pitch
                new_note.storedInstrument = instrument.ElectricBass()
                new_note.duration = duration.Duration(4)
                # adjust the octave of the note
                while new_note.pitch.midi < lower_bound:
                    new_note.pitch.octave += 1
                while new_note.pitch.midi > upper_bound:
                    new_note.pitch.octave -= 1

                new_note.offset = offset  # assign the same offset to all notes in the chord
                notes.append(new_note)

            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)

        # pattern is a note
        else:
            try:
                new_pitch = int(pattern)
            except ValueError:
                new_pitch = default_pitch

            new_note = note.Note()
            new_note.pitch.midi = new_pitch
            new_note.offset = offset
            new_note.storedInstrument = instrument.ElectricBass()
            new_note.duration = duration.Duration(4)
            # adjust the octave of the note
            while new_note.pitch.midi < lower_bound:
                new_note.pitch.octave += 1
            while new_note.pitch.midi > upper_bound:
                new_note.pitch.octave -= 1

            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 0.4  # Reduce this value to increase the overlap

    midi_stream = stream.Stream(output_notes)
    midi_stream.insert(0, tempo.MetronomeMark(number=30))
    midi_file_path = 'lofi_beats.mid'
    midi_stream.write('midi', fp=midi_file_path)


if __name__ == '__main__':
    generate()
